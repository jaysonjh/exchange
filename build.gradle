plugins {
    id 'java'
    id 'application'
}

group 'io.github.onlynight'
version '2.1'

sourceCompatibility = 1.8

mainClassName = 'io.github.onlynight.exchange.Main'

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(':translator-plugin-sdk')

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile 'com.google.code.gson:gson:2.8.5'

    // https://mvnrepository.com/artifact/dom4j/dom4j
    compile 'dom4j:dom4j:1.6.1'

    // https://github.com/onlynight/FastIni
    // https://jitpack.io/#onlynight/FastIni
    compile 'com.github.onlynight:FastIni:1.2.1'

}

// set compile task encoding
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
}

task "create-dirs" << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
} as String

jar {
    manifest {
        attributes("Main-Class": "io.github.onlynight.exchange.Main",
                "Implementation-Title": "Gradle")
    }
}

// delete android xml translate result folders
task deleteXmlTranslateRes {

    doLast {
        File pluginsPath = new File(rootDir.getAbsolutePath() + '\\values\\');
        File[] files = pluginsPath.listFiles()
        for (File file : files) {
            if (file.isDirectory()) {
                file.deleteDir()
            }
        }
    }

}

// delete ios strings translate result folders
task deleteStringsTranslateRes {

    doLast {
        File pluginsPath = new File(rootDir.getAbsolutePath() + '\\zh-Hans.lproj\\');
        File[] files = pluginsPath.listFiles()
        for (File file : files) {
            if (file.isDirectory()) {
                file.deleteDir()
            }
        }
    }

}

// copy all plugins to "plugins" folder
task copyAllPlugins {
    doLast {

        deleteAllPlugins.execute()

        // base plugin sdk
        copy {
            from 'translator-plugin-sdk/build/libs/'
            into 'plugins/sdk/'
        }

        // android xml plugin sdk
        copy {
            from 'document-handler-android-xml-plugin/build/libs/'
            into 'plugins/android/'
        }

        copy {
            from 'document-handler-android-xml-plugin/'
            into 'plugins/android'
            include 'language_folder_mapper.json'
        }

        // ios strings plugin sdk
        copy {
            from 'document-handler-ios-strings-plugin/build/libs/'
            into 'plugins/ios/'
        }

        copy {
            from 'document-handler-ios-strings-plugin/'
            into 'plugins/ios'
            include 'language_folder_mapper.json'
        }

        // baidu translate plugin sdk
        copy {
            from 'translate-platform-baidu-plugin/build/libs/'
            into 'plugins/baidu/'
        }

        copy {
            from 'translate-platform-baidu-plugin/'
            into 'plugins/baidu/'
            include 'diff_language_mapper.ini', 'support_language.txt'
        }

        // google translate plugin sdk
        copy {
            from 'translate-platform-google-plugin/build/libs/'
            into 'plugins/google/'
        }

        copy {
            from 'translate-platform-google-plugin/'
            into 'plugins/google/'
            include 'diff_language_mapper.ini', 'support_language.txt'
        }

        // youdao translate plugin sdk
        copy {
            from 'translate-platform-youdao-plugin/build/libs/'
            into 'plugins/youdao/'
        }

        copy {
            from 'translate-platform-youdao-plugin/'
            into 'plugins/youdao/'
            include 'diff_language_mapper.ini', 'support_language.txt'
        }
    }
}

// delete plugins folder
task deleteAllPlugins {

    doLast {

        File pluginsPath = new File(rootDir.getAbsolutePath() + '\\plugins\\');
        pluginsPath.deleteDir();

    }

}

// release
task release {

    doFirst {
        // clean all build and build jar files
        clean.execute()

        File releasePath = new File('release/release-' + version)
        releasePath.deleteDir()

        buildAllJar.execute()
    }

    doLast {
        install.execute()
        copyAllPlugins.execute()

        copy {
            from 'plugins/'
            into 'release/release-' + version + '/plugins/'
        }

        copy {
            from 'build/install/exchange/lib/'
            into 'release/release-' + version + '/libs/'
        }

        // delete duplicate libs
        File libs = new File(rootDir.getAbsolutePath() + '/release/release-' + version + '/libs/')
        File[] jars = libs.listFiles()
        for (File file : jars) {
            if (file.getName().equals('exchange-' + version + '.jar')) {
                file.delete()
            } else if (file.getName().startsWith('translator-plugin-sdk-')) {
                file.delete()
            }
        }

        // copy plugin host jar file to root path
        copy {
            from 'build/install/exchange/lib/'
            into 'release/release-' + version + '/'
            include 'exchange-' + version + '.jar'
        }

        // copy config file
        copy {
            from './'
            into 'release/release-' + version + '/'
            include 'support_language.txt', 'translate_config.ini'
        }

        // generate run.sh
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File('release/release-' + version + '/' + 'run.sh')), 'utf-8'))
        writer.write('#!/usr/bin/env bash\n')
        writer.write('java -Dfile.encoding=utf-8 -jar exchange-' + version + '.jar\n')
        writer.close()

        // generate run.bat
        writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File('release/release-' + version + '/' + 'run.bat')), 'utf-8'))
        writer.write('java -Dfile.encoding=utf-8 -jar exchange-' + version + '.jar\n')
        writer.close()

        // create translate source folder
        File path = new File('release/release-' + version + '/values/')
        if (!path.exists()) {
            path.mkdirs()
        }
        path = new File('release/release-' + version + '/zh-Hans.lproj/')
        if (!path.exists()) {
            path.mkdirs()
        }

        // generate strings.xml
        writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File('release/release-' + version + '/values/' + 'strings.xml')), 'utf-8'))
        writer.write('<resources>\n')
        writer.write('    <string name="more">更多</string>\n')
        writer.write('    <string name="title">标题</string>\n')
        writer.write('    <string name="subtitle">副标题</string>\n')
        writer.write('</resources>')
        writer.close()

        // generate Localizable.strings
        writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File('release/release-' + version + '/zh-Hans.lproj/' + 'Localizable.strings')), 'utf-8'))
        writer.write('/* \n' +
                '  Localizable.strings\n' +
                '  Fishing\n' +
                '\n' +
                '  Created by olunx on 16/3/3.\n' +
                '  Copyright © 2016年 Smallai. All rights reserved.\n' +
                '*/\n')
        writer.write('login_intro = "你的渔获测量专家";')
        writer.close()

        // generate Localizable.strings
        writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File('release/release-' + version + '/zh-Hans.lproj/' + 'Camera.strings')), 'utf-8'))
        writer.write('/* Class = "UITableViewController"; title = "选择鱼种"; ObjectID = "tmB-Gp-B45"; */\n')
        writer.write('"tmB-Gp-B45.title" = "选择鱼种";')
        writer.close()

        writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File('release/release-' + version + '/' + 'README.txt')), 'utf-8'))
        writer.write('you can direct run "run.bat" or "run.sh" to execute translte task')
        writer.close()
    }

}

task buildAllJar(type: Exec, description: 'build all jar') {
    workingDir './'
    //on windows:
    commandLine 'cmd', '/c', 'gradlew.bat build jar'
}

task install(type: Exec, description: 'install dist') {
    workingDir './'
    //on windows:
    commandLine 'cmd', '/c', 'gradlew.bat installDist'
}